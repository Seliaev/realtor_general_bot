БОТ ТЕЛЕГРАМ "Риэлтор"

Написан на aiogram 3.x.

I) Структура основного бота:
1. Подобрать недвижимость ✅
   а. Новостройка ✅
      - Число комнат ✅
      - Район ✅
      - Бюджет ✅
      - Телефон (пользователь может отказаться давать телефон) ✅
        При отказе записывается имя пользователя или "Не указан".
   б. Вторичное жилье ✅
      - Число комнат ✅
      - Район ✅
      - Бюджет ✅
      - Телефон (пользователь может отказаться давать телефон) ✅
        При отказе записывается имя пользователя или "Не указан".
   в. Жилье в историческом центре ✅
      - Число комнат ✅
      - Состояние (под ремонт, с ремонтом) ✅
      - Телефон (пользователь может отказаться давать телефон) ✅
        При отказе записывается имя пользователя или "Не указан".
   Дополнительно: Добавлена колонка с Telegram-ссылкой (username.t.me).

2. Продать недвижимость ✅
   - Телефон (пользователь может отказаться давать телефон) ✅
     При отказе записывается имя пользователя или "Не указан".
   - Добавлена колонка с Telegram-ссылкой (username.t.me).

3. Записаться на экскурсию по новостройкам ✅
   - Телефон (пользователь может отказаться давать телефон) ✅
     При отказе записывается имя пользователя или "Не указан".
   - Добавлена колонка с Telegram-ссылкой (username.t.me).

Функционал дополнительный:
- Все записи сохраняются в Google Tables для доступа из любого места ✅
  Используются листы SearchRequests, SellRequests, ExcursionRequests с соответствующими заголовками.
- У бота есть админ-панель в виде второго бота ⏳
  Реализован отдельный бот для уведомлений (utils/notify_admin.py), но функционал админ-панели (выключение/включение, массовые сообщения) пока не реализован.
- Первое сообщение должно быть с картинкой и текстом "я специалист бла-бла, рада ответить на Ваши вопросы. Нажмите на старт чтобы начать наше общение" ✅
  Реализовано в handlers/start.py с использованием FSInputFile для локального изображения.

II) Админ-бот может:
- Выключать бот ⏳
  Не реализовано, требуется логика управления состоянием бота (например, через bot_status в config.py).
- Включать его ⏳
  Не реализовано, требуется логика управления состоянием бота.
- Приходят уведомления о каждой новой заявке со всеми данными ✅
  Уведомления отправляются через utils/notify_admin.py с HTML-форматированием.
- Возможность через админ-бота писать сообщения избирательно или массово пользователям основного бота ⏳
  Не реализовано, требуется добавить команды для админ-бота.

Дополнительно к меню основного бота:
- Сделай возможность редактировать текст меню и текст ответов не редактируя код ✅
  Реализовано через YAML-файлы (texts/*.yaml), которые поддерживают HTML-форматирование. Тексты можно редактировать, изменяя файлы main_menu.yaml, responses.yaml, welcome.yaml, admin_menu.yaml, без изменения кода.

- Текущая структура:
  - handlers/: Содержит файлы для обработки команд и логики (callback_handlers.py, excursion.py, property_search.py, property_sell.py, start.py).
  - keyboards/: Содержит файлы с определениями клавиатур (budget_keyboard.py, condition_keyboard.py, district_keyboard.py, main_menu.py, phone_keyboard.py, property_type_keyboard.py, rooms_keyboard.py).
  - states/: Содержит файлы с состояниями FSM (excursion_states.py, search_states.py, sell_states.py).
  - texts/: Содержит YAML-файлы с текстами (admin_menu.yaml, main_menu.yaml, responses.yaml, welcome.yaml).
  - utils/: Содержит утилиты (google_sheets.py, notify_admin.py, text_manager.py).
  - config.py: Конфигурационный файл.
  - main.py: Главный файл запуска.


Следующие шаги:
- Добавить обработку "Назад".
- Реализовать админ-управление (включение/выключение, сообщения).
- Добавить временные метки в Google Sheets.



III) Файл: credentials.json
"""
Файл credentials.json можно получить следующим образом:
1. Перейдите в Google Cloud Console.
2. Создайте проект (или используйте существующий).
3. Включите API Google Sheets и Google Drive.
4. Перейдите в раздел "Управление сервисными аккаунтами" (IAM & Admin -> Service Accounts).
5. Создайте новый сервисный аккаунт, сохраните JSON-файл с ключами и поместите его в корень проекта как credentials.json.
"""